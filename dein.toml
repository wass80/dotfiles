# Essentials
[[plugins]] # Async
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''
[[plugins]] # Submode
repo = 'kana/vim-submode'
hook_post_source = '''
let g:submode_keep_leaving_key=1
set noshowmode
let g:submode_timeout=0
'''
[[plugins]] # Colorscheme
repo = 'chriskempson/vim-tomorrow-theme'
hook_add = '''
  set background=dark
  au MyAutoCmd VimEnter * nested colorscheme Tomorrow-Night-Bright
'''
[[plugins]] # Indent highlight
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_faster = 1
'''
[[plugins]] # Folding Message
repo = 'LeafCage/foldCC'
hook_add = '''
  set foldmethod=marker
  set foldtext=FoldCCtext()
  set foldcolumn=1
  set fillchars=vert:\|
'''
[[plugins]] # Status line
repo = 'itchyny/lightline.vim'
[[plugins]] # Quick run
repo = "thinca/vim-quickrun"
hook_add = '''
let g:quickrun_config = {
\   "_" : {
\       "runner" : "vimproc",
\       "runner/vimproc/updatetime" : 40,
\       "hook/quickfix_replate_tempname_to_bufnr/enable_exit" : 1,
\       "hook/quickfix_replate_tempname_to_bufnr/priority_exit" : -10,
\       "outputter/buffer/split" : ":botright 5sp",
\       "hook/turret/enable" : 1,
\       "hook/turret/wait" : 5,
\       "hook/turret/redraw" : 1,
\   },
\   "cpp" : {
\       "command": "clang++",
\       "cmdopt": "-std=c++0x -Wall",
\   },
\}
nmap <Space>q <Plug>(quickrun)
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun
'''
[[plugins]]
repo = "osyo-manga/shabadou.vim"
hook_post_source = '''
call quickrun#module#register(shabadou#make_quickrun_hook_anim(
\   "turret",
\   ['{:}-', '{:}--', '{:}---', '{:}----', '{:}-----', '{:}<the cake is a lie.'],
\   12,
\), 1)
'''
[[plugins]] # Syntax check
repo    = 'osyo-manga/vim-watchdogs'
depends = [
  'vim-hier',
  'quickfixstatus',
  'shabadou.vim',
  'vim-quickrun',
]
on_event = ['FocusLost', 'CursorHold']
hook_post_source = '''
let s:config = {
\    "watchdogs_checker/_" : {
\        "hook/close_quickfix/enable_exit" : 1,
\    },
\}
call extend(g:quickrun_config, s:config)
unlet s:config
call watchdogs#setup(g:quickrun_config)
let g:watchdogs_check_BufWritePost_enable = 1
'''
[[plugins]]
repo = "cohama/vim-hier"
[[plugins]]
repo = "dannyob/quickfixstatus"
[[plugins]]
repo = "tomtom/quickfixsigns_vim"
[[plugins]] # Auto formatter
repo = "Chiel92/vim-autoformat"
hook_add = '''
let g:formatdef_clangformat = "'clang-format -lines='.a:firstline.':'.a:lastline.' --assume-filename='.bufname('%').' -style=\"{BasedOnStyle: Google, AlignTrailingComments: true, '.(&textwidth ? 'ColumnLimit: '.&textwidth.', ' : '').(&expandtab ? 'UseTab: Never, IndentWidth: '.&shiftwidth : 'UseTab: Always').'}\"'"
'''

# Complete
[[plugins]]
repo = "wass80/neosnippet-snippets"
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = 1
inoremap <expr><tab> pumvisible() ? "\<C-n>" :
\ neosnippet#expandable_or_jumpable() ?
\    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
[[plugins]]
repo = 'Shougo/neosnippet'
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

# View
[[plugins]] # Denite
repo = 'Shougo/denite.nvim'
on_cmd = ['Denite']
hook_add = '''
nmap <silent> <space>z :<C-u>Denite file_mru<CR>
nmap <silent> <space>f :<C-u>Denite file_rec<CR>
nmap <silent> <space>? :<C-u>Denite line<CR>
'''
[[plugins]] # Lookup reference K
repo = "thinca/vim-ref"
[[plugins]] # Git
repo = "tpope/vim-fugitive"
hook_add = '''
noremap <space>g :Gstatus<CR>
'''
[[plugins]] # Local config
repo = "editorconfig/editorconfig-vim"
if = "!has('win32')"
[[plugins]] # Easy cursor moving
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
let g:EasyMotion_keys = 'hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
let g:EasyMotion_grouping = 1
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_skipfoldedline = 0
let g:EasyMotion_startofline = 0
let g:EasyMotion_enter_jump_first = 1
if(has('migemo'))
    let g:EasyMotion_use_migemo = 1
endif
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue
map s <Plug>(easymotion-s2)
nmap <Space>/ <Plug>(easymotion-sn)
xmap <Space>/ <Plug>(easymotion-sn)
omap <Space>/ <Plug>(easymotion-tn)
let g:EasyMotion_startofline = 0
map <Space>w <Plug>(easymotion-bd-wl)
map <Space>W <Plug>(easymotion-bd-el)
'''
[[plugins]] # Repeat f
repo = 'rhysd/clever-f.vim'
hook_add = '''
let g:clever_f_use_migemo=1
" let g:clever_f_chars_match_any_signs=1 " has bug on 't/T'
let g:clever_f_fix_key_direction=1
'''
[[plugins]] # Switch words
repo = "AndrewRadev/switch.vim"
hook_add = '''
let g:switch_mapping = ""
nnoremap <Space>n  :<C-u>Switch<CR>
let g:switch_custom_definitions =
    \ [
    \   ['pick', 'squash', 'fixup', 'edit'],
    \   ['->', '<-']
    \ ]
'''
[[plugins]]
repo =  'kana/vim-operator-user.git'
[[plugins]] # co, cO
repo =  'emonkak/vim-operator-comment'
on_map = ["<Plug>(operator-comment)",
          "<Plug>(operator-uncomment)"]
hook_add = '''
map co <Plug>(operator-comment)
map cO <Plug>(operator-uncomment)
'''
[[plugins]] # cx, cxx, X(in visual), cxc(reset)
repo = 'tommcdo/vim-exchange'
hook_add = '''
map cd cx
map cdd cxx
map cdc cxc
'''
[[plugins]]
repo = 'kana/vim-operator-replace.git'
on_map = ["<Plug>(operator-replace)"]
hook_add = '''
map R <Plug>(operator-replace)
'''
[[plugins]]
repo = 'rhysd/vim-operator-surround'
on_map = [
"<Plug>(operator-surround-append)",
"<Plug>(operator-surround-delete)",
"<Plug>(operator-surround-replace)"]
hook_add = '''
noremap gh gd
map gs <Plug>(operator-surround-append)
map gd <Plug>(operator-surround-delete)
map gc <Plug>(operator-surround-replace)
'''
[[plugins]]
repo =  'thinca/vim-visualstar'
[[plugins]]
repo = 'tyru/operator-star.vim'
on_map = [
"<Plug>(operator-*)",
"<Plug>(operator-g*)",
"<Plug>(operator-#)",
"<Plug>(operator-g#)"]
hook_add = '''
map *  <Plug>(operator-*)
map g* <Plug>(operator-g*)
map #  <Plug>(operator-#)
map g# <Plug>(operator-g#)
'''
[[plugins]]
repo = 'osyo-manga/vim-operator-jump_side'
on_map = [
"<Plug>(operator-jump-tail-out)",
"<Plug>(operator-jump-head-out)",
"<Plug>(operator-jump-toggle)"]
hook_add = '''
map <Space>j <Plug>(operator-jump-tail-out)
map <Space>k <Plug>(operator-jump-head-out)
map ; <Plug>(operator-jump-toggle)
'''
[[plugins]]
repo =  'kana/vim-textobj-user'
[[plugins]] # al / il
repo =  'kana/vim-textobj-line'
[[plugins]] # ai / ii
repo =  'kana/vim-textobj-indent'
[[plugins]]
repo =  'kana/vim-textobj-function'
[[plugins]] # af* / if*
repo = 'thinca/vim-textobj-between'
on_map = [
"<Plug>(textobj-function-i)",
"<Plug>(textobj-function-a)",
"<Plug>(textobj-function-i)",
"<Plug>(textobj-function-a)"]
hook_add = '''
let g:textobj_function_no_default_key_mappings=1
omap iF <Plug>(textobj-function-i)
omap aF <Plug>(textobj-function-a)
vmap iF <Plug>(textobj-function-i)
vmap aF <Plug>(textobj-function-a)
'''
[[plugins]]
repo = 'kana/vim-textobj-entire'
on_map = [
"<Plug>(textobj-entire-a)",
"<Plug>(textobj-entire-a)",
"<Plug>(textobj-entire-i)",
"<Plug>(textobj-entire-i)"]
hook_add = '''
let g:textobj_entire_no_default_key_mappings=1
omap ao <Plug>(textobj-entire-a)
omap ao <Plug>(textobj-entire-a)
vmap io <Plug>(textobj-entire-i)
vmap io <Plug>(textobj-entire-i)
'''
[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
on_map = [
"<Plug>(textobj-multiblock-a)",
"<Plug>(textobj-multiblock-i)",
"<Plug>(textobj-multiblock-a)",
"<Plug>(textobj-multiblock-i)"]
hook_add = '''
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
vmap ab <Plug>(textobj-multiblock-a)
vmap ib <Plug>(textobj-multiblock-i)
'''
[[plugins]] # az / iz
repo =  'kana/vim-textobj-fold'
[[plugins]] # a, / i,
repo =  'sgur/vim-textobj-parameter'
[[plugins]] # ac / ic
repo =  'glts/vim-textobj-comment'
[[plugins]] # ay / iy
repo =  'kana/vim-textobj-syntax'
[[plugins]] # av, aV
repo =  'rhysd/vim-textobj-word-column'
[[plugins]] # ip
repo =  'gilligan/textobj-lastpaste'
[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = [
"<Plug>(expand_region_expand)",
"<Plug>(expand_region_shrink)"]
hook_add = """
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'i,'  :0,
      \ 'il'  :0,
      \ 'al'  :0,
      \ 'ip'  :0,
      \ 'io'  :0,
      \ }
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
"""

[[plugins]] # Repeat
repo =  "tpope/vim-repeat"
[[plugins]] # Align text
repo =  "junegunn/vim-easy-align"
on_map = [
"<Plug>(EasyAlign)"]
hook_add = """
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
"""
[[plugins]] # Visual text moving
repo =  "t9md/vim-textmanip"
on_map = [
"<Plug>(textmanip-move-down)",
"<Plug>(textmanip-move-up)",
"<Plug>(textmanip-move-left)",
"<Plug>(textmanip-move-right)"]
hook_add = """
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
"""
[[plugins]] # Interactive subsutitute
repo =  "osyo-manga/vim-over"
on_cmd = ["OverCommandLine"]
hook_add = """
nnoremap <silent> <Space>s :OverCommandLine <CR>
vnoremap <silent> <Space>s :OverCommandLine '<,'>s/<CR>
"""
[[plugins]] # Case sensitive substitute
repo =  "tpope/vim-abolish"
[[plugins]] # Join multiline
repo = "AndrewRadev/splitjoin.vim"
[[plugins]] # Smooth scroll
repo =  "yonchu/accelerated-smooth-scroll"

# cpp
[[pluginson]]
repo =  'vim-jp/cpp-vim'
on_ft = 'cpp'
[[plugins]]
repo =  'slim-template/vim-slim'
on_ft = 'slim'

# haskell
[[plugins]]
repo =  'kana/vim-filetype-haskell'
on_ft = 'haskell'
[[plugins]]
repo =  'eagletmt/ghcmod-vim'
on_ft = 'haskell'
[[plugins]]
repo =  'ujihisa/neco-ghc'
on_ft = 'haskell'
hook_add = """
noremap <space>m :GhcModType<CR>
"""
[[plugins]]
repo =  'ujihisa/ref-hoogle'
on_ft = 'haskell'
[[plugins]]
repo =  'ujihisa/unite-haskellimport'
on_ft = 'haskell'

# Markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
[[plugins]]
repo =  'joker1007/vim-markdown-quote-syntax'
on_ft = 'markdown'

# Html
[[plugins]]
repo =  'othree/html5.vim'
on_ft = 'html'
[[plugins]]
repo =  'mattn/emmet-vim'
on_ft = 'html'

# Css
[[plugins]]
repo =  'hail2u/vim-css3-syntax'
on_ft = 'css'

# Coffee
[[plugins]]
repo =  'kchmck/vim-coffee-script'
on_ft = 'coffeescript'

# Rust
[[plugins]] # require rustfmt
repo =  'rust-lang/rust.vim'
on_ft = 'rust'

[[plugins]]
repo =  'isRuslan/vim-es6'
on_ft = 'javascript'
[[plugins]]
repo =  'jiangmiao/simple-javascript-indenter'
on_ft = 'javascript'
[[plugins]]
repo =  'mattn/jscomplete-vim'
on_ft = 'javascript'

# Typescript
[[plugins]]
repo =  'clausreinke/typescript-tools'
on_ft = 'typescript'
hook_post_update = '''
  let g:dein#plugin.build = 'npm install -g'
'''
[[plugins]]
repo =  'clausreinke/typescript-tools'
on_ft = 'typescript'

# HBS
[[plugins]]
repo =  'mustache/vim-mustache-handlebars'
on_ft = 'html.handlebars'

# Json
[[plugins]]
repo =  'vim-scripts/JSON.vim'
on_ft = 'json'

# Coq
[[plugins]]
repo =  'jvoorhis/coq.vim'
on_ft = 'coq'
[[plugins]]
repo =  'def-lkb/vimbufsync'
on_ft = 'coq'
[[plugins]]
repo =  'the-lambda-church/coquille'
on_ft = 'coq'
